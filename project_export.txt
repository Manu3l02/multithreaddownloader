==================== ./pom.xml ====================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>io.manuel</groupId>
  <artifactId>multithreaddownloader</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>MultiThreadDownloaderFX</name>
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>17</maven.compiler.release>
    <javafx.version>21.0.8</javafx.version>
  </properties>

  <dependencies>
    <!-- JavaFX dependencies -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-graphics</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-base</artifactId>
      <version>${javafx.version}</version>
    </dependency>

    <!-- JUnit 5.11.0 -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.11.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>5.11.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.11.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Plugin JavaFX -->
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <configuration>
          <mainClass>io.manuel.multithreaddownloader.MainApp</mainClass>
        </configuration>
      </plugin>

      <!-- Compiler -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.13.0</version>
      </plugin>
    </plugins>
  </build>
</project>


==================== ./README.md ====================
# 🧵 MultiThreadDownloaderFX

Un'applicazione Java per il download multi-threaded di file, dotata di interfaccia grafica JavaFX.  
Ogni thread scarica una parte del file in parallelo, migliorando le prestazioni ed esplorando la concorrenza in Java.

---

## 🚀 Funzionalità

- 📥 Scaricamento file via HTTP usando più thread (divisione per byte range)
- 🧪 Barra di avanzamento del download globale nella GUI
- 🔎 Verifica se il file è già presente per evitare sovrascrittura
- 🖥️ Interfaccia semplice creata con JavaFX
- 📄 Log chiaro del progresso di ogni thread
- 💡 Struttura modulare con separazione tra core e UI

---

## 🛠️ Tecnologie utilizzate

- **Java 17**
- **JavaFX 21**
- **Maven** per la gestione delle dipendenze
- **JUnit 5** per i test (base)
- **Git** per il controllo di versione

---

## 🧩 Struttura del progetto

<pre>
src/
├── main/
│   └── java/
│       └── io.manuel.multithreaddownloader
│           ├── MainApp.java
│           ├── core/
│           │   ├── Downloader.java
│           │   └── DownloadTask.java
│           └── ui/
│               └── DownloadView.java
└── test/
    └── java/
        └── io.manuel.multithreaddownloader.AppTest.java
</pre>

---

## ▶️ Come eseguire il progetto

### ⚙️ Requisiti:

- Java 17 installato
- Maven installato
- JavaFX SDK scaricato (oppure usato via Maven)

### 🧪 Avviare l'applicazione:

```bash
mvn clean compile
mvn javafx:run
```

oppure da IDE (Eclipse/IntelliJ): avvia MainApp.java

## 🔭 Estensioni future (TODO)

- Visualizzazione del progresso per ogni thread nella GUI

- Selettore del numero di thread nella GUI

- Selezione della cartella di salvataggio

- Pausa / Ripresa del download

- Supporto per download HTTPS con autenticazione (token, cookie)

## 🪪 Licenza

Questo progetto è open source e distribuito con licenza [MIT](LICENSE).

## ✍️ Autore

Manuel

- 🔗 github.com/Manu3l02



==================== ./src/main/java/io/manuel/multithreaddownloader/core/Downloader.java ====================
package io.manuel.multithreaddownloader.core;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;

public class Downloader {

    private final String fileURL;
    private final String outputFile;
    private final int numThreads;

    public Downloader(String fileURL, String outputFile, int numThreads) {
        this.fileURL = fileURL;
        this.outputFile = outputFile;
        this.numThreads = numThreads;
    }

    public void start() throws IOException {
        File f = new File(outputFile);
        if (f.exists()) {
            System.out.println("⚠️ Il file '" + outputFile + "' esiste già. Download annullato.");
            return;
        }

        System.out.println("📥 Inizio download da: " + fileURL);
        System.out.println("💾 Salvataggio in: " + outputFile);
        System.out.println("🧵 Thread utilizzati: " + numThreads);

        URL url = new URL(fileURL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        int contentLength = conn.getContentLength();
        conn.disconnect();

        if (contentLength <= 0) {
            System.out.println("❌ Impossibile determinare la dimensione del file.");
            return;
        }

        System.out.println("📦 Dimensione file: " + contentLength + " byte");

        RandomAccessFile file = new RandomAccessFile(outputFile, "rw");
        file.setLength(contentLength);
        file.close();

        int partSize = contentLength / numThreads;
        Thread[] threads = new Thread[numThreads];

        for (int i = 0; i < numThreads; i++) {
            int start = i * partSize;
            int end = (i == numThreads - 1) ? contentLength - 1 : start + partSize - 1;

            threads[i] = new Thread(new DownloadTask(fileURL, outputFile, start, end, i));
            threads[i].start();
        }

        // Aspetta la fine di tutti i thread
        for (Thread t : threads) {
            try {
                t.join();
            } catch (InterruptedException e) {
                System.out.println("⚠️ Download interrotto: " + e.getMessage());
            }
        }

        System.out.println("🎉 Download completato: " + outputFile);
    }
}



==================== ./src/main/java/io/manuel/multithreaddownloader/core/DownloadTask.java ====================
package io.manuel.multithreaddownloader.core;

import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;

public class DownloadTask implements Runnable {

    private final String fileURL;
    private final String outputFile;
    private final int startByte;
    private final int endByte;
    private final int threadId;

    public DownloadTask(String fileURL, String outputFile, int startByte, int endByte, int threadId) {
        this.fileURL = fileURL;
        this.outputFile = outputFile;
        this.startByte = startByte;
        this.endByte = endByte;
        this.threadId = threadId;
    }

    @Override
    public void run() {
        try {
            HttpURLConnection conn = (HttpURLConnection) new URL(fileURL).openConnection();
            conn.setRequestProperty("Range", "bytes=" + startByte + "-" + endByte);
            conn.connect();

            InputStream in = conn.getInputStream();
            RandomAccessFile raf = new RandomAccessFile(outputFile, "rw");
            raf.seek(startByte);

            byte[] buffer = new byte[4096];
            int bytesRead;
            long totalRead = 0;
            long segmentSize = endByte - startByte + 1;
            int lastPercent = 0;

            while ((bytesRead = in.read(buffer)) != -1) {
                raf.write(buffer, 0, bytesRead);
                totalRead += bytesRead;

                int percent = (int)((totalRead * 100) / segmentSize);
                if (percent >= lastPercent + 10) {
                    System.out.println("🧵 Thread " + threadId + " → " + percent + "%");
                    lastPercent = percent;
                }
            }

            raf.close();
            in.close();
            System.out.println("✅ Thread " + threadId + " completato.");

        } catch (IOException e) {
            System.out.println("❌ Thread " + threadId + " errore: " + e.getMessage());
        }
    }
}



==================== ./src/main/java/io/manuel/multithreaddownloader/MainApp.java ====================
package io.manuel.multithreaddownloader;

import io.manuel.multithreaddownloader.ui.DownloadView;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class MainApp extends Application {

	@Override
	public void start(Stage primaryStage) throws Exception {
		primaryStage.setTitle("MultiThread Downloader FX");
		
		DownloadView view = new DownloadView();
		
		Scene scene = new Scene(view, 600, 400);
		primaryStage.setScene(scene);
		primaryStage.show();
	}
	
	public static void main(String[] args) throws Exception {
		launch(args);
	}

}



==================== ./src/main/java/io/manuel/multithreaddownloader/ui/DownloadView.java ====================
package io.manuel.multithreaddownloader.ui;

import io.manuel.multithreaddownloader.core.Downloader;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.DirectoryChooser;

import java.io.File;
import java.io.IOException;
import java.net.URL;

public class DownloadView extends VBox {

    private TextField urlField;
    private Button downloadButton;
    private ProgressBar progressBar;
    private TextArea logArea;
    private TextField fileNameField;
    private Button folderButton;
    private Label folderLabel;
    private File selectedFolder;


    public DownloadView() {
        initUI();
    }

    private void initUI() {
        setPadding(new Insets(20));
        setSpacing(10);

        Label titleLabel = new Label("MultiThread Downloader");
        titleLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: darkslategray;");

        urlField = new TextField();
        urlField.setPromptText("Inserisci URL del file da scaricare");

        fileNameField = new TextField();
        fileNameField.setPromptText("Nome file (opzionale)");

        folderButton = new Button("Scegli cartella...");
        folderLabel = new Label("Nessuna cartella selezionata");
        folderButton.setOnAction(e -> chooseFolder());

        
        downloadButton = new Button("Scarica");
        downloadButton.setOnAction(e -> startDownload());

        progressBar = new ProgressBar(0);
        progressBar.setPrefWidth(400);

        logArea = new TextArea();
        logArea.setEditable(false);
        logArea.setPrefHeight(200);

        getChildren().addAll(
        	    titleLabel,
        	    urlField,
        	    fileNameField,
        	    folderButton,
        	    folderLabel,
        	    downloadButton,
        	    progressBar,
        	    new Label("Log:"),
        	    logArea
        	);

    }

    private void startDownload() {
        String fileURL = urlField.getText().trim();
        if (fileURL.isEmpty()) {
            showMessage("Inserisci un URL valido.");
            return;
        }

        try {
            URL url = new URL(fileURL);

            String fileNameInput = fileNameField.getText().trim();
            String outputFileName;

            if (!fileNameInput.isEmpty()) {
                outputFileName = fileNameInput;
                if (!outputFileName.contains(".")) {
                    String path = url.getPath();
                    if (path.contains(".")) {
                        outputFileName += path.substring(path.lastIndexOf("."));
                    }
                }
            } else {
                String path = url.getPath();
                String fileName = path.substring(path.lastIndexOf('/') + 1);

                if (fileName.isEmpty()) {
                    fileName = "multithread_downloader_tmgdw";
                } else {
                    int queryIdx = fileName.indexOf('?');
                    if (queryIdx != -1) {
                        fileName = fileName.substring(0, queryIdx);
                    }

                    int dotIdx = fileName.lastIndexOf('.');
                    if (dotIdx != -1) {
                        String base = fileName.substring(0, dotIdx);
                        String ext = fileName.substring(dotIdx);
                        fileName = base + "_tmgdw" + ext;
                    } else {
                        fileName = fileName + "_tmgdw";
                    }
                }

                outputFileName = fileName;
            }

            File targetDir = (selectedFolder != null) ? selectedFolder : new File(".");
            File outputFile = new File(targetDir, outputFileName);

            int count = 1;
            while (outputFile.exists()) {
                String baseName = outputFileName;
                String ext = "";
                int dotIdx = outputFileName.lastIndexOf('.');
                if (dotIdx != -1) {
                    baseName = outputFileName.substring(0, dotIdx);
                    ext = outputFileName.substring(dotIdx);
                }
                outputFile = new File(targetDir, baseName + "(" + count + ")" + ext);
                count++;
            }

            String output = outputFile.getAbsolutePath();

            int threads = 4;

            downloadButton.setDisable(true);
            logArea.clear();
            showMessage("Avvio download: " + output);

            new Thread(() -> {
                try {
                    Downloader downloader = new Downloader(fileURL, output, threads);
                    downloader.start();
                    Platform.runLater(() -> {
                        progressBar.setProgress(1.0);
                        showMessage("Download completato!");
                        downloadButton.setDisable(false);
                    });
                } catch (IOException e) {
                    Platform.runLater(() -> {
                        showMessage("Errore: " + e.getMessage());
                        downloadButton.setDisable(false);
                    });
                }
            }).start();

        } catch (Exception e) {
            showMessage("URL non valido: " + e.getMessage());
        }
    }
    
    private void chooseFolder() {
        DirectoryChooser chooser = new DirectoryChooser();
        chooser.setTitle("Scegli una cartella di destinazione");
        File folder = chooser.showDialog(getScene().getWindow());
        if (folder != null) {
            selectedFolder = folder;
            folderLabel.setText("📁 " + folder.getAbsolutePath());
        }
    }


    private void showMessage(String msg) {
        logArea.appendText(msg + "\n");
    }
}


==================== ./src/test/java/io/manuel/multithreaddownloader/AppTest.java ====================
package io.manuel.multithreaddownloader;

import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

/**
 * Unit test for simple App.
 */
public class AppTest {

    /**
     * Rigorous Test :-)
     */
    @Test
    public void shouldAnswerWithTrue() {
        assertTrue(true);
    }
}



==================== ./pom.xml ====================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>io.manuel</groupId>
  <artifactId>multithreaddownloader</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>MultiThreadDownloaderFX</name>
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>17</maven.compiler.release>
    <javafx.version>21.0.8</javafx.version>
  </properties>

  <dependencies>
    <!-- JavaFX dependencies -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-graphics</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-base</artifactId>
      <version>${javafx.version}</version>
    </dependency>

    <!-- JUnit 5.11.0 -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.11.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>5.11.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.11.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Plugin JavaFX -->
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <configuration>
          <mainClass>io.manuel.multithreaddownloader.MainApp</mainClass>
        </configuration>
      </plugin>

      <!-- Compiler -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.13.0</version>
      </plugin>
    </plugins>
  </build>
</project>


==================== ./project_export.txt ====================



==================== ./README.md ====================
# 🧵 MultiThreadDownloaderFX

Un'applicazione Java per il download multi-threaded di file, dotata di interfaccia grafica JavaFX.  
Ogni thread scarica una parte del file in parallelo, migliorando le prestazioni ed esplorando la concorrenza in Java.

---

## 🚀 Funzionalità

- 📥 Scaricamento file via HTTP usando più thread (divisione per byte range)
- 🧪 Barra di avanzamento del download globale nella GUI
- 🔎 Verifica se il file è già presente per evitare sovrascrittura
- 🖥️ Interfaccia semplice creata con JavaFX
- 📄 Log chiaro del progresso di ogni thread
- 💡 Struttura modulare con separazione tra core e UI

---

## 🛠️ Tecnologie utilizzate

- **Java 17**
- **JavaFX 21**
- **Maven** per la gestione delle dipendenze
- **JUnit 5** per i test (base)
- **Git** per il controllo di versione

---

## 🧩 Struttura del progetto

<pre>
src/
├── main/
│   └── java/
│       └── io.manuel.multithreaddownloader
│           ├── MainApp.java
│           ├── core/
│           │   ├── Downloader.java
│           │   └── DownloadTask.java
│           └── ui/
│               └── DownloadView.java
└── test/
    └── java/
        └── io.manuel.multithreaddownloader.AppTest.java
</pre>

---

## ▶️ Come eseguire il progetto

### ⚙️ Requisiti:

- Java 17 installato
- Maven installato
- JavaFX SDK scaricato (oppure usato via Maven)

### 🧪 Avviare l'applicazione:

```bash
mvn clean compile
mvn javafx:run
```

oppure da IDE (Eclipse/IntelliJ): avvia MainApp.java

## 🔭 Estensioni future (TODO)

- Visualizzazione del progresso per ogni thread nella GUI

- Selettore del numero di thread nella GUI

- Selezione della cartella di salvataggio

- Pausa / Ripresa del download

- Supporto per download HTTPS con autenticazione (token, cookie)

## 🪪 Licenza

Questo progetto è open source e distribuito con licenza [MIT](LICENSE).

## ✍️ Autore

Manuel

- 🔗 github.com/Manu3l02



==================== ./src/main/java/io/manuel/multithreaddownloader/controller/DownloadManager.java ====================
package io.manuel.multithreaddownloader.controller;

import io.manuel.multithreaddownloader.core.Downloader;
import io.manuel.multithreaddownloader.core.ProgressListener;
import javafx.application.Platform;

import java.io.File;
import java.io.IOException;
import java.net.URL;

public class DownloadManager {

    public interface Callback {
        void onLog(String message);
        void onProgress(int threadId, double percent);
        void onComplete();
        void onError(String errorMessage);
    }

    public void startDownload(String fileURL, String manualName, File folder, int threads, Callback callback) {
        try {
            URL url = new URL(fileURL);

            String outputFileName = determineFileName(url, manualName);
            File targetDir = (folder != null) ? folder : new File(".");
            File outputFile = resolveOutputFile(targetDir, outputFileName);

            String output = outputFile.getAbsolutePath();

            callback.onLog("Avvio download: " + output);

            Downloader downloader = new Downloader(fileURL, output, threads, new ProgressListener() {
                @Override
                public void onProgress(int threadId, double percent) {
                    Platform.runLater(() -> callback.onProgress(threadId, percent));
                }
            });

            new Thread(() -> {
                try {
                    downloader.start();
                    Platform.runLater(callback::onComplete);
                } catch (IOException e) {
                    Platform.runLater(() -> callback.onError(e.getMessage()));
                }
            }).start();

        } catch (Exception e) {
            callback.onError("URL non valido: " + e.getMessage());
        }
    }

    private String determineFileName(URL url, String manualName) {
        if (manualName != null && !manualName.isBlank()) {
            if (!manualName.contains(".")) {
                String path = url.getPath();
                if (path.contains(".")) {
                    manualName += path.substring(path.lastIndexOf("."));
                }
            }
            return manualName;
        } else {
            String path = url.getPath();
            String name = path.substring(path.lastIndexOf("/") + 1);
            if (name.isEmpty()) name = "multithread_downloader_tmgdw";
            else {
                int queryIdx = name.indexOf('?');
                if (queryIdx != -1) name = name.substring(0, queryIdx);
                int dot = name.lastIndexOf('.');
                if (dot != -1) {
                    name = name.substring(0, dot) + "_tmgdw" + name.substring(dot);
                } else {
                    name += "_tmgdw";
                }
            }
            return name;
        }
    }

    private File resolveOutputFile(File dir, String name) {
        File file = new File(dir, name);
        int count = 1;
        while (file.exists()) {
            String base = name;
            String ext = "";
            int dot = name.lastIndexOf('.');
            if (dot != -1) {
                base = name.substring(0, dot);
                ext = name.substring(dot);
            }
            file = new File(dir, base + "(" + count + ")" + ext);
            count++;
        }
        return file;
    }
}



==================== ./src/main/java/io/manuel/multithreaddownloader/core/Downloader.java ====================
package io.manuel.multithreaddownloader.core;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;

public class Downloader {

	private final String fileURL;
	private final String outputFile;
	private final int numThreads;
	private final ProgressListener listener;

	public Downloader(String fileURL, String outputFile, int numThreads, ProgressListener listener) {
		this.fileURL = fileURL;
		this.outputFile = outputFile;
		this.numThreads = numThreads;
		this.listener = listener;
	}

	public void start() throws IOException {
		File f = new File(outputFile);
		if (f.exists()) {
			System.out.println("⚠️ Il file '" + outputFile + "' esiste già. Download annullato.");
			return;
		}

		System.out.println("📥 Inizio download da: " + fileURL);
		System.out.println("💾 Salvataggio in: " + outputFile);
		System.out.println("🧵 Thread utilizzati: " + numThreads);

		URL url = new URL(fileURL);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		int contentLength = conn.getContentLength();
		conn.disconnect();

		if (contentLength <= 0) {
			System.out.println("❌ Impossibile determinare la dimensione del file.");
			return;
		}

		System.out.println("📦 Dimensione file: " + contentLength + " byte");

		RandomAccessFile file = new RandomAccessFile(outputFile, "rw");
		file.setLength(contentLength);
		file.close();

		int partSize = contentLength / numThreads;
		Thread[] threads = new Thread[numThreads];

		for (int i = 0; i < numThreads; i++) {
			int start = i * partSize;
			int end = (i == numThreads - 1) ? contentLength - 1 : start + partSize - 1;

			threads[i] = new Thread(new DownloadTask(fileURL, outputFile, start, end, i, listener));
			threads[i].start();
		}

		// Aspetta la fine di tutti i thread
		for (Thread t : threads) {
			try {
				t.join();
			} catch (InterruptedException e) {
				System.out.println("⚠️ Download interrotto: " + e.getMessage());
			}
		}

		System.out.println("🎉 Download completato: " + outputFile);
	}
}



==================== ./src/main/java/io/manuel/multithreaddownloader/core/DownloadTask.java ====================
package io.manuel.multithreaddownloader.core;

import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;

public class DownloadTask implements Runnable {

    private final String fileURL;
    private final String outputFile;
    private final int startByte;
    private final int endByte;
    private final int threadId;
    private final ProgressListener listener;

    public DownloadTask(String fileURL, 
    					String outputFile, 
    					int startByte, 
    					int endByte, 
    					int threadId,
    					ProgressListener listener) {
        this.fileURL = fileURL;
        this.outputFile = outputFile;
        this.startByte = startByte;
        this.endByte = endByte;
        this.threadId = threadId;
        this.listener = listener;
    }

    @Override
    public void run() {
        try {
            HttpURLConnection conn = (HttpURLConnection) new URL(fileURL).openConnection();
            conn.setRequestProperty("Range", "bytes=" + startByte + "-" + endByte);
            conn.connect();

            InputStream in = conn.getInputStream();
            RandomAccessFile raf = new RandomAccessFile(outputFile, "rw");
            raf.seek(startByte);

            byte[] buffer = new byte[4096];
            int bytesRead;
            long totalRead = 0;
            long segmentSize = endByte - startByte + 1;

            while ((bytesRead = in.read(buffer)) != -1) {
                raf.write(buffer, 0, bytesRead);
                totalRead += bytesRead;
                double percent = (totalRead * 1.0 / segmentSize);
                listener.onProgress(threadId, percent);
            }

            raf.close();
            in.close();
            System.out.println("✅ Thread " + threadId + " completato.");

        } catch (IOException e) {
            System.out.println("❌ Thread " + threadId + " errore: " + e.getMessage());
        }
    }
}



==================== ./src/main/java/io/manuel/multithreaddownloader/core/ProgressListener.java ====================
package io.manuel.multithreaddownloader.core;

public interface ProgressListener {
    void onProgress(int threadId, double percent);
}



==================== ./src/main/java/io/manuel/multithreaddownloader/MainApp.java ====================
package io.manuel.multithreaddownloader;

import io.manuel.multithreaddownloader.ui.DownloadView;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class MainApp extends Application {

	@Override
	public void start(Stage primaryStage) throws Exception {
		primaryStage.setTitle("MultiThread Downloader FX");
		
		DownloadView view = new DownloadView();
		
		Scene scene = new Scene(view, 600, 400);
		primaryStage.setScene(scene);
		primaryStage.show();
	}
	
	public static void main(String[] args) throws Exception {
		launch(args);
	}

}



==================== ./src/main/java/io/manuel/multithreaddownloader/ui/DownloadView.java ====================
package io.manuel.multithreaddownloader.ui;

import io.manuel.multithreaddownloader.controller.DownloadManager;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.DirectoryChooser;

import java.io.File;

public class DownloadView extends VBox {

    private TextField urlField;
    private TextField fileNameField;
    private Button folderButton;
    private Label folderLabel;
    private Button downloadButton;
    private ProgressBar progressBar;
    private TextArea logArea;
    private VBox threadProgressContainer;
    private ProgressBar[] threadBars;
    private File selectedFolder;

    public DownloadView() {
        initUI();
    }

    private void initUI() {
        setPadding(new Insets(20));
        setSpacing(10);

        Label titleLabel = new Label("MultiThread Downloader");
        titleLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: darkslategray;");

        urlField = new TextField();
        urlField.setPromptText("Inserisci URL del file da scaricare");

        fileNameField = new TextField();
        fileNameField.setPromptText("Nome file (opzionale)");

        folderButton = new Button("Scegli cartella...");
        folderLabel = new Label("Nessuna cartella selezionata");
        folderButton.setOnAction(e -> chooseFolder());

        downloadButton = new Button("Scarica");
        downloadButton.setOnAction(e -> startDownload());

        progressBar = new ProgressBar(0);
        progressBar.setPrefWidth(400);

        logArea = new TextArea();
        logArea.setEditable(false);
        logArea.setPrefHeight(200);

        threadProgressContainer = new VBox(5);
        threadProgressContainer.setPadding(new Insets(10));

        getChildren().addAll(
                titleLabel,
                urlField,
                fileNameField,
                folderButton,
                folderLabel,
                downloadButton,
                progressBar,
                new Label("Log:"),
                logArea,
                threadProgressContainer
        );
    }

    private void startDownload() {
        String fileURL = urlField.getText().trim();
        String fileName = fileNameField.getText().trim();

        if (fileURL.isEmpty()) {
            showMessage("Inserisci un URL valido.");
            return;
        }

        int threads = 4;
        threadBars = new ProgressBar[threads];
        threadProgressContainer.getChildren().clear();

        for (int i = 0; i < threads; i++) {
            ProgressBar bar = new ProgressBar(0);
            bar.setPrefWidth(400);
            threadBars[i] = bar;
            threadProgressContainer.getChildren().add(new Label("Thread " + i));
            threadProgressContainer.getChildren().add(bar);
        }

        downloadButton.setDisable(true);
        logArea.clear();

        DownloadManager manager = new DownloadManager();
        manager.startDownload(
                fileURL,
                fileName,
                selectedFolder,
                threads,
                new DownloadManager.Callback() {
                    @Override
                    public void onLog(String message) {
                        showMessage(message);
                    }

                    @Override
                    public void onProgress(int threadId, double percent) {
                        if (threadId >= 0 && threadId < threadBars.length) {
                            threadBars[threadId].setProgress(percent);
                        }
                    }

                    @Override
                    public void onComplete() {
                        progressBar.setProgress(1.0);
                        showMessage("✅ Download completato!");
                        downloadButton.setDisable(false);
                    }

                    @Override
                    public void onError(String errorMessage) {
                        showMessage("❌ Errore: " + errorMessage);
                        downloadButton.setDisable(false);
                    }
                }
        );
    }

    private void chooseFolder() {
        DirectoryChooser chooser = new DirectoryChooser();
        chooser.setTitle("Scegli una cartella di destinazione");
        File folder = chooser.showDialog(getScene().getWindow());
        if (folder != null) {
            selectedFolder = folder;
            folderLabel.setText("📁 " + folder.getAbsolutePath());
        }
    }

    private void showMessage(String msg) {
        logArea.appendText(msg + "\n");
    }
}


==================== ./src/test/java/io/manuel/multithreaddownloader/AppTest.java ====================
package io.manuel.multithreaddownloader;

import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

/**
 * Unit test for simple App.
 */
public class AppTest {

    /**
     * Rigorous Test :-)
     */
    @Test
    public void shouldAnswerWithTrue() {
        assertTrue(true);
    }
}



